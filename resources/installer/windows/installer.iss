; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; NOTE: The following variables must be set on the command line:
;    'AppNameOverride'
;    'AppPublisherOverride'
;    'AppURLOverride'
;    'AppExeNameOverride'
;    'ApplicationFilesPath'
;    'OutputPath'
;    'AppVersionOverride'
;    'OutputBaseFilenameOverride'
;    'AllowedArchitectureOverride'
;    'LicenseFileOverride'

; NOTE: Use the following syntax on the command line to define a variable value:
; /DMyAppVersion=1.0.0

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{98C37AB8-FA9F-49F6-B5B2-9E9CB3FB389C}
ArchitecturesAllowed={#AllowedArchitectureOverride}
ArchitecturesInstallIn64BitMode=x64
AppName={#AppNameOverride}
AppVersion={#AppVersionOverride}
VersionInfoVersion={#AppVersionOverride}
AppVerName={#AppNameOverride} {#AppVersionOverride}
AppPublisher={#AppPublisherOverride}
AppPublisherURL={#AppURLOverride}
AppSupportURL={#AppURLOverride}
AppUpdatesURL={#AppURLOverride}
DefaultDirName={pf}\{#AppNameOverride}
DefaultGroupName={#AppNameOverride}
AllowNoIcons=yes
;LicenseFile={#LicenseFileOverride}
OutputBaseFilename={#OutputBaseFilenameOverride}
;SetupIconFile=resources\icon.ico
Compression=lzma2/max
SolidCompression=yes
OutputDir={#OutputPath}
UninstallDisplayIcon={app}\{#AppExeNameOverride}
SetupLogging=yes
; Disable auto closing of application because the app handles it.
CloseApplications=no

[Messages]
SetupAppTitle = {#AppNameOverride} {#AppVersionOverride} {#AllowedArchitectureOverride}
SetupWindowTitle = {#AppNameOverride} {#AppVersionOverride} {#AllowedArchitectureOverride}

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
;Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "{#ApplicationFilesPath}\*"; DestDir: "{app}"; Flags: ignoreversion createallsubdirs recursesubdirs

[Icons]
;Name: "{group}\{#AppNameOverride}"; Filename: "{app}\{#AppExeNameOverride}"
Name: "{group}\{cm:UninstallProgram,{#AppNameOverride}}"; Filename: "{uninstallexe}"
;Name: "{commondesktop}\{#AppNameOverride}"; Filename: "{app}\{#AppExeNameOverride}"; Tasks: desktopicon
;Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#AppNameOverride}"; Filename: "{app}\{#AppExeNameOverride}"; Tasks: quicklaunchicon

[Run]
;Filename: "{app}\{#AppExeNameOverride}"; Description: "{cm:LaunchProgram,{#StringChange(AppNameOverride, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
Filename: "echo"; Flags: runhidden skipifdoesntexist; StatusMsg: "Setting up application..."; AfterInstall: SetupApplication

[UninstallRun]
Filename: "{app}\{#AppExeNameOverride}"; Flags: runhidden skipifdoesntexist; Parameters: "-uninstall"; StatusMsg: "Removing application...";
;Filename: "rmdir"; Flags: runhidden; Parameters: "{app}";

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
function GetApplicationBinaryPath(): String;
var
    sBinaryPath: String;
begin
    sBinaryPath := ExpandConstant('{app}') + '\';

    if IsWin64 then
    begin
        sBinaryPath := sBinaryPath + ExpandConstant('{#AppExeNameOverride}');
    end
    else
    begin
        sBinaryPath := sBinaryPath + ExpandConstant('{#AppExeNameOverride}');
    end;

    Result := sBinaryPath;
end;

////////////////////////////////////////////////////////////////////////////////
// Functions for uninstalling the currently installed version of the app.
// The following code was taken from Craig McQueen's InnoSetup example at:
// http://stackoverflow.com/a/2099805
////////////////////////////////////////////////////////////////////////////////

function GetUninstallString(): String;
var
    sUnInstPath: String;
    sUnInstallString: String;
begin
    sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
    sUnInstallString := '';
    if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
        RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
    Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
    Result := (GetUninstallString() <> '');
end;

function UninstallOldVersion(): Integer;
var
    sUnInstallString: String;
    iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

    // default return value
    Result := 0;

    // get the uninstall string of the old app
    sUnInstallString := GetUninstallString();
    if sUnInstallString <> '' then begin
        sUnInstallString := RemoveQuotes(sUnInstallString);
        if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
            Result := 3
        else
            Result := 2;
    end else
        Result := 1;
end;

procedure SetupApplication();
var
    ResultCode: Integer;
    sBinaryPath: String;
    sTmpFilePath: String;
begin
    sBinaryPath := GetApplicationBinaryPath();
    sTmpFilePath := ExpandConstant('{tmp}') + '\grundy-install.log';

    if Exec(sBinaryPath, '-install > "' + sTmpFilePath + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
        if not (ResultCode = 0) then
            MsgBox('Failed to setup application (code ' + IntToStr(ResultCode) +
                '). Refer to the log file at "' + sTmpFilePath + '".', mbCriticalError, MB_OK);
    end
    else
    begin
        MsgBox('Failed to start application. Error: ' + SysErrorMessage(ResultCode), mbCriticalError, MB_OK);
    end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
    if (CurStep=ssInstall) then
    begin
        if (IsUpgrade()) then
        begin
            UninstallOldVersion();
        end;
    end;
end;
